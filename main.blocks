<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="^KOeX6G^;!5!NL~wNCDN" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="8L0*EGBHgwK,U#fbuJFN" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="game.stats=true" numlines="1"></mutation><next><block type="typescript_statement" id="a~#w/tr^n^wm/yaZ-M;F" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace sh1106 {" line1="" line2="    // define consts" line3="    export const WHITE = 1" line4="    export const SSD1306_EXTERNALVCC = 0x1" line5="    export const SSD1306_SWITCHCAPVCC = 0x2" line6="" line7="    export const SSD1306_SETCONTRAST = 0x81" line8="    export const SSD1306_DISPLAYALLON_RESUME = 0xA4" line9="    export const SSD1306_DISPLAYALLON = 0xA5" line10="    export const SSD1306_NORMALDISPLAY = 0xA6" line11="    export const SSD1306_INVERTDISPLAY = 0xA7" line12="    export const SSD1306_DISPLAYOFF = 0" line13="    export const SSD1306_DISPLAYON = 0xAF" line14="    export const SSD1306_SETDISPLAYOFFSET = 0xD3" line15="    export const SSD1306_SETCOMPINS = 0xDA" line16="    export const SSD1306_SETVCOMDETECT = 0xDB" line17="    export const SSD1306_SETDISPLAYCLOCKDIV = 0xD5" line18="    export const SSD1306_SETPRECHARGE = 0xD9" line19="    export const SSD1306_SETMULTIPLEX = 0xA8" line20="    export const SSD1306_SETLOWCOLUMN = 0x00" line21="    export const SSD1306_SETHIGHCOLUMN = 0x10" line22="    export const SSD1306_SETSTARTLINE = 0x40" line23="    export const SSD1306_MEMORYMODE = 0x20" line24="    export const SSD1306_COMSCANINC = 0xC0" line25="    export const SSD1306_COMSCANDEC = 0xC8" line26="    export const SSD1306_SEGREMAP = 0xA0" line27="    export const SSD1306_CHARGEPUMP = 0x8D" line28="" line29="    //tested with waveshare 1.3inch-OLED-HAT default spi 4-wire mode" line30="    export class SH1106SPI {" line31="        spi: SPI" line32="        public readonly WIDTH:number =128" line33="        public readonly HEIGHT:number=64" line34="        _rotate:number" line35="        public screen: Image" line36="        buffer: Buffer" line37="" line38="        public constructor(" line39="            private rst:DigitalInOutPin, " line40="            private dc:DigitalInOutPin, " line41="            private cs:DigitalInOutPin, " line42="            external_vcc = SSD1306_EXTERNALVCC) {" line43="" line44="            this.spi = pins.spi() //default SPI: MOSI=pins.P15, MISO=pins.P14, SCK=pins.P13" line45="            // this.spi.setMode(2)  //whatever, default or 0~3 are the same result" line46="            // this.spi.setFrequency(6000000) // default freq or &gt; 6Mhz will reach the fastest fps(about 18)" line47="            this.screen=image.create(this.WIDTH,this.HEIGHT)" line48="            this.buffer = control.createBuffer(this.WIDTH * this.HEIGHT &gt;&gt;3)" line49="" line50="            this.reset()  //required?" line51="            this.init_display(external_vcc)" line52="            this.rotate(0)" line53="        }" line54="" line55="        reset(){" line56="            this.rst.digitalWrite(true)" line57="            pause(1)" line58="            this.rst.digitalWrite(false)" line59="            pause(10)" line60="            this.rst.digitalWrite(true)" line61="        }" line62="" line63="        command(b: number) {" line64="            if (!this.spi) return;" line65="            this.cs.digitalWrite(true)" line66="            this.dc.digitalWrite(false)" line67="            this.cs.digitalWrite(false)" line68="            this.spi.write(b)" line69="            this.cs.digitalWrite(true)" line70="        }" line71="" line72="        data(txBuf: Buffer) {" line73="            let rxBuf = pins.createBuffer(txBuf.length)" line74="            this.cs.digitalWrite(true)" line75="            this.dc.digitalWrite(true)" line76="            this.cs.digitalWrite(false)" line77="            this.spi.transfer(txBuf, rxBuf)" line78="            this.cs.digitalWrite(true)" line79="        }" line80="" line81="        init_display(vccstate: number) {" line82="            this.command(sh1106.SSD1306_DISPLAYOFF)" line83="            this.command(sh1106.SSD1306_SETDISPLAYCLOCKDIV)" line84="            this.command(0x80)  // the suggested ratio 0x80" line85="" line86="            this.command(sh1106.SSD1306_SETMULTIPLEX)" line87="            this.command(this.HEIGHT - 1)" line88="" line89="            this.command(sh1106.SSD1306_SETDISPLAYOFFSET)" line90="            this.command(0x0)  // no offset" line91="" line92="            this.command(sh1106.SSD1306_SETSTARTLINE | 0x0)  // line //0" line93="" line94="            this.command(sh1106.SSD1306_CHARGEPUMP)" line95="" line96="            this.command(vccstate == SSD1306_EXTERNALVCC ? 0x14 : 0x10)" line97="" line98="            this.command(sh1106.SSD1306_MEMORYMODE)" line99="            this.command(0x00)  // 0x0 act like ks0108" line100="" line101="            // this.command(mySpi.SSD1306_SEGREMAP | 0x1)" line102="" line103="            this.command(sh1106.SSD1306_COMSCANDEC)" line104="" line105="            this.command(sh1106.SSD1306_SETCOMPINS)" line106="            this.command(this.HEIGHT == 32 ? 0x02 : 0x12)  // TODO - calculate based on _rawHieght ?" line107="" line108="            this.command(sh1106.SSD1306_SETCONTRAST)" line109="            this.command(0x9F)" line110="" line111="            this.command(sh1106.SSD1306_SETPRECHARGE)" line112="            this.command(0x22)" line113="" line114="            this.command(sh1106.SSD1306_SETVCOMDETECT)" line115="            this.command(0x40)" line116="" line117="            this.command(sh1106.SSD1306_DISPLAYALLON_RESUME)" line118="" line119="            this.command(sh1106.SSD1306_NORMALDISPLAY)" line120="" line121="            this.command(sh1106.SSD1306_DISPLAYON)" line122="" line123="            // display()" line124="            this.command(sh1106.SSD1306_SETLOWCOLUMN | 0x2)  // low col = 0" line125="            this.command(sh1106.SSD1306_SETHIGHCOLUMN | 0x0)  // hi col = 0" line126="            this.command(sh1106.SSD1306_SETSTARTLINE | 0x0)  // line //0" line127="        }" line128="" line129="        rotate(rotate:number) {" line130="            this._rotate = rotate" line131="            this.command(sh1106.SSD1306_COMSCANINC | ((rotate &amp; 1) &lt;&lt; 3))" line132="            this.command(sh1106.SSD1306_SEGREMAP | (rotate &amp; 1))" line133="        }" line134="" line135="        clear(){" line136="            this.buffer.fill(0)" line137="        }" line138="" line139="        setPixel(x:number, y:number, c:number){" line140="            let valueByte= this.buffer.getUint8((Math.idiv(y,8)*this.WIDTH+x))" line141="            if(c)" line142="                valueByte |= 1&lt;&lt;(y%8)" line143="            else" line144="                valueByte &amp;= ~(1 &lt;&lt; (y % 8))" line145="            this.buffer.setUint8((Math.idiv(y, 8) * this.WIDTH + x), valueByte)" line146="        }" line147="" line148="        drawScreen() {" line149="            const rowBuf=control.createBuffer(this.HEIGHT)" line150="            for (let x = 0; x &lt; this.WIDTH; x++) {" line151="                this.screen.getRows(x, rowBuf)" line152="                for (let y = 0; y &lt; this.HEIGHT; y+=8) {" line153="                    let valueByte2=0" line154="                    let bit=1" line155="                    for (let i = 0; i &lt; 8; i++) {" line156="                        const c = rowBuf.getUint8(y + i)" line157="                        if (c)" line158="                            valueByte2|=bit" line159="                        bit&lt;&lt;=1" line160="                    }" line161="                    this.buffer.setUint8((y&gt;&gt;3)*this.WIDTH+x, valueByte2)" line162="                }" line163="            }" line164="        }" line165="" line166="        show() {" line167="            // aqee tuned, tested, but maybe bug inside:)" line168="            const m_col = 2" line169="            this.command(1)  // send a bunch of data in one xmission" line170="            for (let j = 0; j &lt; this.HEIGHT &gt;&gt; 3; j++) {" line171="                this.command(sh1106.SSD1306_SETLOWCOLUMN | (m_col &amp; 0xF))   // set lower column address" line172="                this.command(sh1106.SSD1306_SETHIGHCOLUMN )  // set higher column address" line173="                this.command(0xB0 + j)  // set page address" line174="                this.data(this.buffer.slice(j * this.WIDTH, this.WIDTH))" line175="            }" line176="        }" line177="    }" line178="" line179="}" numlines="180"></mutation></block></next></block></statement></block></xml>